/**
 * This is an abstract class representing a Bus.
 * Each Bus has a type, id, origin (from), destination (to), number of rows, price per ticket, and total revenue.
 */
public abstract class Bus {
    private String type;
    private final int id;
    private final String from;
    private final String to;
    private int rows;
    private final double price;
    private double revenue = 0;
    /**
     * Constructs a new Bus with the given parameters.
     *
     * @param type The type of the bus
     * @param id The unique ID of the bus
     * @param from The origin of the bus route
     * @param to The destination of the bus route
     * @param rows The number of rows in the bus
     * @param price The price of a ticket for the bus
     */
    public Bus(String type, int id, String from, String to, int rows, double price) {
        this.type = type;
        this.id = id;
        this.from = from;
        this.to = to;
        this.rows = rows;
        this.price = price;
    }
    public int getId() {
        return id;
    }
    public String getFrom() {
        return from;
    }

    public String getTo() {
        return to;
    }

    public double getPrice() {
        return price;
    }

    public double getRevenue() {
        return revenue;
    }

    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }
    /**
     * Sells a ticket for the given seat number and writes the transaction to the given output file.
     * The implementation of this method is left to the subclasses.
     *
     * @param seatNumber The number of the seat for which to sell a ticket
     * @param outputFile The file to which to write the transaction
     * @return The revenue generated by selling the ticket
     */
    public abstract double sellTicket(int[] seatNumber,String outputFile);
    /**
     * Refunds tickets for the given seat numbers and writes the transaction to the given output file.
     * Only a portion of the ticket price (determined by the refund cut) is refunded.
     * The implementation of this method is left to the subclasses.
     *
     * @param seatNumbers The numbers of the seats for which to refund tickets
     * @param outputFile The file to which to write the transaction
     * @return The updated total revenue of the bus after refunding the tickets
     */
    public abstract double refundTicket(int[] seatNumbers,String outputFile);
    /**
     * Prints the details of the voyage to the given output file.
     * The implementation of this method is left to the subclasses.
     *
     * @param outputFile The file to which to write the voyage details
     */
    public abstract void printingVoyage(String outputFile);
    /**
     * Cancels the voyage and writes the cancellation details to the given output file.
     * The implementation of this method is left to the subclasses.
     *
     * @param outputFile The file to which to write the cancellation details
     */
    public abstract void cancellingVoyage(String outputFile);
    /**
     * Converts an array of integers to a string, with each integer separated by a dash ("-").
     *
     * @param intArray The array of integers to convert
     * @return A string representation of the array
     */
    public String convertIntArrayToString(int[] intArray) {

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < intArray.length; i++) {
            sb.append(intArray[i]);
            if (i < intArray.length - 1) {
                sb.append("-"); // Append "-" for all but the last element
            }
        }
        return sb.toString();
    }
}
